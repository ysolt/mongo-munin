#!/usr/bin/env python

import os
import re
import sys
import pymongo

FIELD_ESCAPE = re.compile("[^A-Za-z_]")


def escape_field(name):
    return FIELD_ESCAPE.sub("_", name)


def mongo_collections(config, client, status):
    collections = []
    for db in client.database_names():
        for collection in client[db].collection_names():
            name = db + "." + collection
            if not config:
                collections.append((name, client[db].command("collstats", collection)))
            else:
                collections.append(name)

    print("multigraph collection_count")
    if config:
        print("graph_title MongoDB collection document count")
        print("graph_args --base 1000 -l 0")
        print("graph_vlabel collection document count")
        print("graph_category MongoDB")
        print("graph_total total")

        for name in collections:
            field_name = escape_field(name)
            print("{0}.label {1}".format(field_name, name))
            print("{0}.min 0".format(field_name))
            print("{0}.type GAUGE".format(field_name))
            print("{0}.draw LINE1".format(field_name))
    else:
        for name, stats in collections:
            print("{0}.value {1}".format(escape_field(name), stats["count"]))

    print("multigraph collection_size")
    if config:
        print("graph_title MongoDB collection size")
        print("graph_args --base 1024 -l 0")
        print("graph_vlabel collection size")
        print("graph_category MongoDB")
        print("graph_total total")

        for name in collections:
            field_name = escape_field(name)
            print("{0}.label {1}".format(field_name, name))
            print("{0}.min 0".format(field_name))
            print("{0}.type GAUGE".format(field_name))
            print("{0}.draw LINE1".format(field_name))
    else:
        for name, stats in collections:
            print("{0}.value {1}".format(escape_field(name), stats["size"]))


def mongo_mem(config, client, status):
    memtype = ("resident", "virtual", "mapped")

    print("multigraph mem")
    if config:
        print("graph_title MongoDB memory usage")
        print("graph_args --base 1024 -l 0 --vertical-label Bytes")
        print("graph_category MongoDB")

        for k in status["mem"]:
            if k in memtype:
                print("{0}.label {1}".format(escape_field(k), k))
                print("{0}.draw LINE1".format(escape_field(k)))
    else:
        for k, v in status["mem"].items():
            if k in memtype:
                print("{0}.value {1}".format(escape_field(k), v * 1024 * 1024))


def mongo_ops(config, client, status):
    print("multigraph ops")
    if config:
        print("graph_title MongoDB ops")
        print("graph_args --base 1000 -l 0")
        print("graph_vlabel ops / ${graph_period}")
        print("graph_category MongoDB")
        print("graph_total total")

        for k in status["opcounters"]:
            print("{0}.label {1}".format(escape_field(k), k))
            print("{0}.min 0".format(escape_field(k)))
            print("{0}.type COUNTER".format(escape_field(k)))
            print("{0}.max 500000".format(escape_field(k)))
            print("{0}.draw LINE1".format(escape_field(k)))
    else:
        for k, v in status["opcounters"].items():
            print("{0}.value {1}".format(escape_field(k), v))


def mongo_conn(config, client, status):
    name = "connections"
    print("multigraph conn")
    if config:
        print("graph_title MongoDB current connections")
        print("graph_args --base 1000 -l 0")
        print("graph_vlabel connections")
        print("graph_category MongoDB")
        print("{0}.label {0}".format(name))
    else:
        print("{0}.value {1}".format(name, status["connections"]["current"]))


def mongo_document_activity(config, client, status):
    print("multigraph docs")
    if config:
        print("graph_title MongoDB document activity")
        print("graph_args --base 1000 -l 0")
        print("graph_vlabel document action")
        print("graph_category MongoDB")

        for k in status["metrics"]["document"]:
            print("{0}.label {1}".format(escape_field(k), k))
            print("{0}.min 0".format(escape_field(k)))
            print("{0}.type COUNTER".format(escape_field(k)))
            print("{0}.max 500000".format(escape_field(k)))
            print("{0}.draw LINE1".format(escape_field(k)))
    else:
        for k, v in status["metrics"]["document"].items():
            print("{0}.value {1}".format(escape_field(k), v))


def mongo_page_faults(config, client, status):
    name = "page_faults"
    print("multigraph page_faults")
    if config:
        print("graph_title MongoDB page faults")
        print("graph_args --base 1000 -l 0")
        print("graph_vlabel faults / ${graph_period}")
        print("graph_category MongoDB")
        print("graph_total total")

        print("{0}.label {0}".format(name))
        print("{0}.min 0".format(name))
        print("{0}.type COUNTER".format(name))
        print("{0}.max 10000".format(name))
        print("{0}.draw LINE1".format(name))
    else:
        print("{0}.value {1}".format(name, status["extra_info"]["page_faults"]))


def mongo_lock(config, client, status):
    # Locks are reported differently pre mongodb 3.x
    if status["version"].startswith("2."):
        mongo_lock_legacy(config, client, status)
        return

    lock_counters = ("acquireCount", "acquireWaitCount", "deadlockCount")
    lock_modes = ("R", "W", "r", "w")

    locks = []
    for lock_type, lock_document in status["locks"].items():
        for counter in lock_counters:
            for mode in lock_modes:
                counter_name = "{0}.{1}.{2}".format(lock_type, counter, mode)
                locks.append((counter_name, lock_document.get(counter, {}).get(mode, 0)))

    print("multigraph lock")
    if config:
        print("graph_title MongoDB locks")
        print("graph_args --base 1000 -l 0")
        print("graph_vlabel locks / ${graph_period}")
        print("graph_category MongoDB")
        print("graph_total total")

        for counter_name, _ in locks:
            field_name = escape_field(counter_name)
            print("{0}.label {1}".format(field_name, counter_name))
            print("{0}.min 0".format(field_name))
            print("{0}.type COUNTER".format(field_name))
            print("{0}.max 10000".format(field_name))
            print("{0}.draw LINE1".format(field_name))
    else:
        for counter_name, count in locks:
            print("{0}.value {1}".format(escape_field(counter_name), count))


def mongo_lock_legacy(config, client, status):
    name = "locked"

    print("multigraph lock")
    if config:
        print("graph_title MongoDB global write lock percentage")
        print("graph_args --base 1000 -l 0 ")
        print("graph_vlabel percentage")
        print("graph_category MongoDB")
        print("{0}.label {0}".format(name))
    else:
        print("{0}.value {1}".format(name, 100 * (status["globalLock"]["lockTime"] / status["globalLock"]["totalTime"])))


def main(config):
    if 'MUNIN_CAP_MULTIGRAPH' not in os.environ:
        sys.stderr.write('MUNIN_CAP_MULTIGRAPH not found in environment\n')
        return 1

    client = pymongo.MongoClient(os.environ.get("MONGO_DB_URI", "localhost"))
    status = client.admin.command('serverStatus')

    mongo_collections(config, client, status)
    mongo_mem(config, client, status)
    mongo_ops(config, client, status)
    mongo_conn(config, client, status)
    mongo_document_activity(config, client, status)
    mongo_page_faults(config, client, status)
    mongo_lock(config, client, status)

    return 0


if __name__ == "__main__":
    sys.exit(main(len(sys.argv) > 1 and sys.argv[1] == "config"))
